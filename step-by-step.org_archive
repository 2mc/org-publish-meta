#    -*- mode: org -*-


Archived entries from file /Users/iani2/Documents/Dev/Emacs/org-publish-meta/step-by-step.org


* DEBUG - rebuilding org-pm-make-file-projects                      :ARCHIVE:
:PROPERTIES:
:DATE:     <2013-12-16 Mon 19:21>
:ARCHIVE_TIME: 2013-12-16 Mon 22:27
:ARCHIVE_FILE: ~/Documents/Dev/Emacs/org-publish-meta/step-by-step.org
:ARCHIVE_OLPATH: Project definition parsing code
:ARCHIVE_CATEGORY: step-by-step
:END:

Glitch found and check introduced through function org-pm-check-project-config-nodes

#+BEGIN_SRC elisp
  
  
  
  (defun org-pm-make-file-projects ()
    "Construct the projects for all project definitions found in current file.
  Project definitions are those nodes which are contained in nodes tagged as
  PROJECT_CONFIGS."
    (interactive)
    (save-excursion
      (save-restriction
        (widen)
        (let
            (project-def
             (template (org-pm-make-default-project-plist))
             (supernodes
              (org-map-entries '(cadr (org-element-at-point)) "PROJECT_CONFIGS"))
             project-def-list tags begin level)
          (dolist (node supernodes)
            (cond ((and
                    (plist-get node :tags)
                    (setq begin (plist-get node :contents-begin)))
                   (setq level (+ 1 (plist-get node :level)))
                   (save-excursion
                     (save-restriction
                       (narrow-to-region begin (plist-get node :contents-end))
                       (dolist 
                           (proj-node (org-map-entries '(cadr (org-element-at-point))))
                         (cond ((equal level (plist-get proj-node :level))
                                (setq project-def
                                      (org-pm-parse-project-def proj-node template))
                                (setq
                                 org-publish-project-alist
                                 (assoc-replace
                                  org-publish-project-alist
                                  (car project-def)
                                  (cdr project-def)))
                                (push project-def 
                                      project-def-list)))
                         ))))))
          project-def-list))))
  
  (defun org-pm-parse-project-def (proj-node template)
    "Return a project definition plist for the node represented by proj-node
  org-element plist."
    (let ((pdef (copy-sequence template))
          (pname (plist-get proj-node :raw-value))
          (begin (plist-get proj-node :contents-begin)))
      (setq pdef (plist-put pdef :project-name pname))
      (setq pdef (plist-put pdef :node-id (org-id-get-create)))
      (setq pdef (plist-put pdef :node-filename
                            (buffer-file-name (current-buffer))))
      (cond 
       (begin
        (save-excursion
          (save-restriction
            (narrow-to-region begin (plist-get proj-node :contents-end))
            (org-map-entries
             '(let* (
                     (element (cadr (org-element-at-point)))
                     (heading (plist-get element :raw-value))
                     (space (string-match " .*" heading))
                     prop-name prop-value contents-begin)
                (cond
                 (space
                  (setq prop-name (substring heading 0 space))
                  (setq prop-value (eval (read (substring heading space))))
                  (if (and 
                       (equal prop-name "include-containing-file")
                       prop-value)
                      (org-pm-add-component 
                       pname (buffer-file-name (current-buffer)) prop-value)))
                 (t (setq prop-name heading)
                    (setq contents-begin (plist-get element :contents-begin))
                    (if contents-begin
                        (setq 
                         prop-value 
                         (buffer-substring 
                          contents-begin
                          (plist-get element :contents-end))))))
                (setq pdef
                      (plist-put pdef (intern (concat ":" prop-name)) prop-value))
                ))))))
      (cons pname pdef)))
  
  ;;;;;;;;;;;;;;;;;;
  
  (cond ((equal level (plist-get proj-node :level))
         (setq project-def
               (org-pm-parse-project-def proj-node template))
         (assoc-replace
          org-publish-project-alist
          (car project-def)
          (cdr project-def))
         (push project-def 
               project-def-list)))
#+END_SRC


