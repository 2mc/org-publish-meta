#+OPTIONS: ^:{} H:5

This reference is out of date. Please see Tutorial instead.

* Overview

Org-pm is a kind or pre-processor for org-publish.  It does following things:

1. It translates plain-text org-mode sections into project definitions.  It can insert templates for doing this into any org-mode document.  The user edits those templates to customize project parameters, and then creates the project with =org-pm-make-projects=.  An org-mode file can define any number of projects.
2. It copies parts of files (org-mode sections) to any number of org-mode publish projects, which can then be published in the usual way with org-publish.  Any section or subsection can be copied to any number of projects.  Projects, folders, and names of files are indicated by setting tags of the section concerned.
3. It saves the =org-publish-projects-alist= between sessions, along with the list of files containing parts that should be copied to projects, and with a list of the location of duplicate project definitions (definitions with the same name in more than one files or sections).  This makes it unnecessary to edit project definition lists in emacs-lisp.
4. It provides menus and lists of defined projects as well as of files that belong to them.  This gives an overview of the state of projects at any given moment and makes access to their files easier.

Here is an overview of the commands available in org-pm:

|--------------------------+------------------------------------------------|
| Shortcut                 | Command                                        |
|--------------------------+------------------------------------------------|
| *MAIN COMMANDS*          |                                                |
|--------------------------+------------------------------------------------|
| H-m H-m                  | org-pm-menu (list all commands, run selection) |
| H-m n or H-m p n         | org-pm-insert-new-project                      |
| H-m m or H-m p m         | org-pm-make-projects (current buffer)          |
| C-u H-m m or C-u H-m p m | org-pm-make-projects (all files)               |
| H-m a                    | org-pm-add-section-to-project                  |
| H-m r                    | org-pm-remove-section-from-project             |
| H-m e                    | org-pm-export                                  |
| H-m P   (TODO)           | org-pm-publish                                 |
|--------------------------+------------------------------------------------|
| *PROJECT DEFINITIONS*    |                                                |
|--------------------------+------------------------------------------------|
| H-m p e or H-m p s       | org-pm-show-project-definition-section         |
| H-m p t                  | org-pm-edit-project-template                   |
| H-m p l                  | org-pm-list-project-defs                       |
| H-m p d                  | org-pm-list-duplicate-project-defs             |
| C-u H-m p d              | pm/edit-duplicate-project-def                  |
| H-m p p                  | org-pm-post-project-def                        |
|--------------------------+------------------------------------------------|
| *TARGET FILE LISTS*      |                                                |
|--------------------------+------------------------------------------------|
| H-m f                    | org-pm-list-exported-files (current buffer)    |
| C-u H-m f                | org-pm-list-exported-files (all)               |
| H-m F  (TODO)            | org-pm-show-target-file-list ???               |
|--------------------------+------------------------------------------------|
| *SAVED DATA*             |                                                |
|--------------------------+------------------------------------------------|
| H-m d l                  | org-pm-load-project-data                       |
| H-m d s                  | org-pm-save-project-data                       |
| H-m d r or H-m d c       | org-pm-reset-project-list                      |
| H-m d e                  | org-pm-edit-saved-project-data                 |
|--------------------------+------------------------------------------------|

* Defining projects

To define an Org-mode publishing project, one writes the publishing options of the project (http://orgmode.org/manual/Publishing-options.html) as subheadings of a section, and the values as contents of the section or as further text in the headline of the section.  The name of the project is given in the heading containing the property subsections.  The entire definition is placed in another section with the tag =PROJECT_DEFS=.

To insert an org-mode project definition into the current file, use command =org-pm-insert-project-template=.  This inserts the contents of a template file into the current file as a subsection of a section with tag "PROJECT_DEFS".

Org-pm provides 2 template files for defining projects. =org-pm-project-template-jekyll.org= and =org-mp-project-template-plain.org=.  The default is =org-pm-project-template-jekyll.org=.  It sets =body-only= to =t=, which means that only the body of the html file is exported.  This is required for use with Jekyll or Octopress as static file web-generation engines.  Other templates can be written.  To specify which template to use, set the path of variable =org-pm-project-template-file-name=.

For each project definition found, org-pm automatically creates two more projects:

1. A /static/ component project (See http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#sec-3-2 about the static component.)  The name of the static project is derived from the original name like this: =<original-project-name>-static=.  The default base-directory and publish-directory of the project are defined as subdirectories of the original project paths by adding "/static/".  One can override these defaults and further configure the static project component by adding properties to the basic project definition:  Any properties that start with the string "static-" will be used as properties of the static project, without the "static-" prefix (see example "project1" below).
2. A /publish/ component project (http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html#sec-3-3) for publishing both the original (org-mode) project and the static component with one command.  The name of the publish component is =<original-project-name>-publish=.

For example:

** This section contains project definitions                  :PROJECT_DEFS:

*** project1
:PROPERTIES:
:ID:       5F4BC8DE-1750-47D3-AB0E-40411860EA69
:END:

**** base-directory "~/Site-Source/project1/"
**** publishing-directory "~/Sites/project1/"
**** with-tags t
**** publishing-function 'org-publish-org-to-html
**** preamble
: <p>This is a test.</p>
: <hr>
**** static-base-directory "~Site-Source/project1/css/"
**** static-publishing-directory "~Sites/project1/css/"

* Specifying projects, folders and file-names to copy files or sections to

There are two ways to indicate which sections to export, where, and how.  Both methods can be used in the same file.  The first method uses a tag enclosed in underscores (=_=) to indicate a project, folder and file where the section should be exported.  The second method uses tag matching to export separately each one section from a group of sections that match a tag-matching-string to a specified folder and with a specified layout.

*** Indicating project-folder-file with tags enclosed in underscore

A single string is used to specify the project, folder and file-name where a file or section should be copied to.  The project-name, folder, and file-name parts are separated by an at-mark (=@=).

*IMPORTANT*: Because org-mode has problems tags that contain a dot (=.=), use hash (=#=) instead of a dot in a file or folder name when putting it in a tag.

Example: The following five strings specify five different projects and locations to copy a file or section to:

- =project1= :: The root directory of =project1=, using the name of the current file or the heading of the current section as file name.
- =project2@news= :: The subdirectory news of =project2=, using the name of the current file.
- =project3@news/august= :: The sub-subdirectory =news/august/= of =project3=, using the name of the current file or the heading of the current section as file name.
- =project4@@index= :: The root directory of =project4=, using =index.org= as file name.
- =project5@static@style#css= :: The subdirectory =static/= of =project5=, using =style.css= as file name.

*** Selecting sections to export by matching tags



** NOTE: Avoid hyphens (=-=) in project names

Org-mode cannot use hyphens (=-=) in tags.  If you create a project whose name contains a hyphen, you will not be able to specify that project as a target using a tag to a heading.  Therefore, project names should not contain hyphens.

** Copying an entire file to one or more projects

To specify that the whole file should be copied to a project, add the project specification string as value of property =PROJECT=.  More than one project can be specified in the same file in this way. For example:

#+BEGIN_EXAMPLE
,#+PROJECT: project1
,#+PROJECT: project2@news
#+END_EXAMPLE

Specifies that the current file should be copied to the root directory of =project1= and to subdirectory =news= of =project2=

*** Copying a section of a file to one or more projects

To specify that a section should be copied to a project, one adds the project/folder/file-name specification string as tag to that section, enclosed in underscores (=_=).

If no filename is provided, then the heading is used as filename.  Spaces are substituted by dashes (=-=).

Several tags can be added in this way to copy the section to more than one project.

Examples:

**** about this site                                             :_project1_:

Copy this section to file =about-this-site.org= in the base directory of =project1=.

**** tutorial 1                                        :_project2@tutorials_:

Copy this section to file =tutorial-1.org= in subdirectory =tutorials= of =project2=.

**** Default Style                                        :_project2@static@style#css_:

Copy this section to file =style.css= in subdirectory =static= of =project2=.  Note: hash (=#=) is used instead of dot (=.=) in the tag, because Org-mode has problems with recognizing tags containing dots.

**** examples                                      :_project1_:_project2_:

Copy this section to file examples.org, in the root directories of projects =project1= and =project2=.

* TODO Variables
:PROPERTIES:
:DATE:     <2013-12-18 Wed 11:52>
:END:

** org-pm-files

Saves a list of paths of all files containing components that should be copied to projects, together with the list of projects that are specified by components of that file.  No other information is stored, because it can always be retrieved from the contents of the file itself.  The list of projects is needed to find all files belonging to a project.

The list is updated each time that a file is parsed by org-pm.  It is saved together with =org-publish-project-alist= to the path specified by =org-pm-project-data-file-path=.

The following illustrates how the files of a project are retrieved from =org-pm=files=

#+BEGIN_SRC elisp
  (let
      ((org-pm-files-demo ;; dummy org-pm-files
        '(("file1.org" "project1" "project2")
          ("file2.org" "project2" "project3")
          ("file3.org" "project1" "project3" "project4")))
       (project "project3") ;; dummy project to look for
       found-files) ;; collect files belonging to "project3" here
    (dolist (files org-pm-files-demo )
      (if (member project files) (add-to-list 'found-files (car files))))
    found-files)
#+END_SRC

#+RESULTS:
| file3.org | file2.org |

** org-pm-project-data-file-path

String specifying the path where org-pm saves =org-publish-project-alist= and =org-pm-files=.  These are all the data that need to be saved between sessions in order to preserve the current state of org-pm projects.  The default value of =org-pm-project-data-file-path= is: =~/.emacs.d/savefile/org-pm-project-data.el=.

** org-pm-default-project-name

** org-pm-default-project-org-folder

** org-pm-default-project-html-folder


* TODO Main functions and commands
:PROPERTIES:
:DATE:     <2013-12-18 Wed 11:16>
:END:

** org-pm-add-file-to-project

Ask the user interactively to input the name of a project to which the present buffer should be added.  Add the buffer to the project through either buffer property =#+PROJECT:= or section tag.  Also ask for folder where to put file of buffer.  If needed, create project definition and add it to buffer.  Created any needed folders.

Steps in detail:

1. Parse buffer contents (=org-pm-parse-buffer=) to update project definitions and create list of projects that this buffer belongs to.
2. Create list of projects to select from, by removing the projects that the buffer belongs to from the projects in org-publish-project-alist.
3. Present menu of projects to select from.
4. If user enters name of new project, offer to create this project.  Let user select or input the paths for base directory and publishing directory.  Create these directories if not present.  Add project definition section to buffer if needed.
5. Ask user to select or input folder inside the source directory where the file should be placed.  If the folder input by the user is not a subfolder of the selected projects' bse directory, then issue an error.  If the folder does not exist, create it.
6. If the selected project is defined in the present buffer:
   - Then add tag with project name and folder path relative to base directory to the section that defines the project.
   - Else add =#+PROJECT:= property on a new line at top of buffer.
7. Add project to the entry of this file in =org-pm-project-components= list.
8. Save config data.

** org-pm-remove-file-from-project

** org-pm-add-section-to-project

** org-pm-remove-section-from-project

** org-pm-parse-buffer

This command parses the current buffer in order to do 3 things:

1. Create project definitions. (org-pm-make-projects)
2. Find which parts of the file are stored in which project, and store the results in org-pm-project-files. (org-pm-make-component-project-list)
3. Save the resulting configurations by writing =org-publish-project-alist= and =org-pm-project-files= to the file whose path is contained in =org-pm-project-data-file-path=

org-pm-parse-buffer can be called explicitly by the user as a command.

If org-pm-auto-parse is enabled, then it is called automatically whenever a buffer is saved.

================================================================
Steps to incorporate:
1. Scan the current buffer to find which projects it already belongs to:
   1. Scan for contents of property =#+PROJECT:=.
   2. Scan for sections with tags enclosed in =_=.
================================================================

** org-pm-publish

Select a project to publish from the projects targeted by current buffer.

Since a file containing org-pm tags can be anywhere outside an org-mode project folder, one cannot use org-publish-current-project to automatically provide the target project based on the file.  Therefore, use =org-pm-publish= instead to select the desired project to publish from a list of projects that are targeted by the current file.

** org-pm-make-projects (called by org-pm-parse-buffer)

** org-pm-make-component-project-list:

** org-pm-copy-components:

org-pm-copy-components can be called explicitly by the user as a command.

If org-pm-auto-copy is enabled, then it is called automatically whenever a project is published.

** org-pm-enable-auto:

** org-pm-disable-auto:

* Storing Project Data

Org-pm stores project data to a file, so that previously defined projects are available when one restarts emacs.

Org-pm saves the data every time that it parses a buffer (function =org-pm-parse-buffer=).

The path of the file holding these data is in variable =org-pm-project-data-file-path=.

The data stored are:

** Org-mode project definition data (=org-publish-project-alist=)

** The target projects for every file and node (=org-pm-project-components=)
:PROPERTIES:
:ID:       A912E617-30B3-4827-89D1-BAA449A8EC49
:END:

For every file and every section (node) component that belongs to a project, org-mode stores the address of the component and a list of the target projects and paths of files where the component should be copied.  All entries are stored in a list in variable =org-pm-project-components=.  This variable is auto-saved together with the =org-publish-project-alist= every time that a file is parsed.

Each entry in =org-pm-project-components= has the form:

#+BEGIN_SRC elisp
(<ID> <FULL PATH TO SOURCE FILE>
    (<PROJECT NAME 1> . <RELATIVE PATH OF TARGET FILE 1>)
    (<PROJECT NAME 2> . <RELATIVE PATH OF TARGET FILE 2>)
    ...
    )
#+END_SRC

Where <ID> is the ID property of the section as provided by org-id-get-create.  For example:

: 878E718E-90BE-4E46-A002-767FCE598354

* Tasks involved, and when they are done

There are two main steps in the org-pm publish process:

1. Parsing a file to find projects and components of projects.  This is done with

2. Copying files or sections (nodes) of files to a project

Additionally, there are tasks needed to keep the data of the project consistent, described in the next section.

** Three main tasks: Specification, Configuration, Publication

*** Specifying configurations through properties and tags in an org file

*** Reading configurations from file data

Parsing a file to find project definitions and components of projects

*** Copying files or sections (nodes) of files to a project based on configurations

** Adding and deleting files or sections to/from projects

*** Adding a file to a project

*** Removing a file from a project

*** Adding a section to a project

*** Removing a section from a project

***

*** Data integrity checks
:PROPERTIES:
:DATE:     <2013-12-20 Fri 00:10>
:END:

**** Duplicate IDs

Duplicate IDs arise when a section of a file is copied to another location along with its IDs

**** Obsolete files

**** Broken links

Broken links arise when
