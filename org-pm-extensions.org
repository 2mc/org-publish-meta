#+TODO: TODO UNDERWAY | DONE CANCELLED
#+TITLE: Optional, Experimental Extensions to org-publish-meta

Some extra ideas that were removed from the core of org-publish-meta during development.
Kept here for later revision.

- org-pm-auto-parse
- org-pm-auto-copy
- org-pm-report-after-copying
...

* UNDERWAY Variables
:PROPERTIES:
:DATE:     <2013-12-18 Wed 11:52>
:END:

** DONE org-pm-auto-parse
CLOSED: [2013-12-18 Wed 15:23]
:PROPERTIES:
:ID:       03CF07FC-5FD7-46C6-BE11-74C3D339A315
:END:

#+BEGIN_SRC emacs-lisp
  (defvar org-pm-auto-parse nil
    "If not nil, automatically parse a org-mode buffer
   for org-pm data before saving it.")
#+END_SRC

** DONE org-pm-auto-copy
CLOSED: [2013-12-18 Wed 15:23]
:PROPERTIES:
:ID:       3AF37A0C-F14A-41A3-B477-5B12696315BE
:END:

#+BEGIN_SRC emacs-lisp
  (defvar org-pm-auto-copy nil ;; 'on-save
  "If not nil, automatically copy file components to a project to the
  project's source folder before publishing.")
#+END_SRC


** Variable: flag for reporting (may be removed)
#+BEGIN_SRC emacs-lisp
  ;; Will replace org-pm-register-project-components.

  ;; Review?  Remove? :
  (defvar org-pm-report-after-copying-p t
  "If not-nil, org-pm-copy-components-to-projects will post a report
  of projects not found or of projects targeted when finishing.")
#+END_SRC


* Auxiliary functions
:PROPERTIES:
:DATE:     <2013-12-18 Wed 17:24>
:END:

** Get drawer contents
#+RESULTS:
#+BEGIN_SRC emacs-lisp
  (defun org-get-drawer (drawer-name)
    "Get the contents of the drawer named 'drawer-name', at current section."
    (save-excursion
      (org-back-to-heading)
      (let* ((plist (cadr (org-element-at-point)))
             (node-end (plist-get plist :end))
             drawer-begin)
        (re-search-forward (format "^:%s:" drawer-name) node-end)
        (forward-char)
        (setq drawer-begin (point))
        (re-search-forward "^:END:" node-end)
        (beginning-of-line)
        (backward-char)
        (buffer-substring drawer-begin (point)))))
#+END_SRC

** Comment out the rest of a section following a comment line

#+BEGIN_SRC emacs-lisp
  (defun org-pm-create-excerpt ()
      "If an org-mode-style comment with contents: READMORE is found,
  then insert a heading after the comment, and add COMMENT status to that heading.
  This excludes the rest of the section from being exported.
  If no READMORE is found, then COMMENT the entire section.
  This is an easy way of creating excerpts when copying a flle to a project,
  and parts of this file are also copied to the project, so we don't want to
  export them with the main file."
      (interactive)
      (save-excursion
        (org-back-to-heading)
        (let* ((plist (cadr (org-element-at-point)))
               (node-begin (plist-get plist :begin))
               (node-end (plist-get plist :end)))
          (re-search-forward "^ # READMORE" node-end t)
          (unless (equal (point) node-begin)
            (org-insert-heading)
            (org-set-comment))
          (message "%d %d %d" (point) node-begin node-end)
          )))
#+END_SRC

** Providing relative paths to root of published project

This makes sure that when a file is copied to a subfolder of the publishing directory, the paths pointing to includes such as css, images, etc. will be converted to show to the root of the project, so that links work.  Such links must be marked using the string ={{.}}= to denote the relative root to the published project, that is, the =publishing-directory=.

#+BEGIN_SRC emacs-lisp
  (defun org-html-provide-relative-path (string backend info)
    "Provide relative path for link."
    (when (org-export-derived-backend-p backend 'html)
      (let ((base-dir (plist-get info :base-directory))
            (input-file (plist-get info :input-file)))
        (when (and base-dir input-file)
          (replace-regexp-in-string
           "{{.}}"
           (org-make-relpath-string
            (plist-get info :base-directory)
            ;; distance of input file from base-directory = relative path!
            (plist-get info ':input-file))
           string)))))

    ;;; Add relative path filter to export final output functions
  (add-to-list 'org-export-filter-final-output-functions
               'org-html-provide-relative-path)

  (defun org-make-relpath-string (base-path file-path)
    "create a relative path for reaching base-path from file-path ('./../..' etc)"
    (let (
          (path ".")
          (depth (-
                  (length (split-string (file-name-directory file-path) "/"))
                  (length (split-string base-path "/")))))
      (dotimes (number
                (- depth 1)
                path)
        (setq path (concat path "/..")))))

#+END_SRC

#+RESULTS:
: org-make-relpath-string

** Customizing the heading of table of contents

Overwriing org-html-toc to use property :toc-heading as string for the Table of Contents heading.  Default is "Table of Contents".

#+BEGIN_SRC emacs-lisp
  (defun org-html-toc (depth info)
    "Build a table of contents.
  DEPTH is an integer specifying the depth of the table.  INFO is a
  plist used as a communication channel.  Return the table of
  contents as a string, or nil if it is empty."
    (let ((toc-heading (plist-get info :toc-heading))
          (toc-entries
           (mapcar (lambda (headline)
                     (cons (org-html--format-toc-headline headline info)
                           (org-export-get-relative-level headline info)))
                   (org-export-collect-headlines info depth)))
          (outer-tag (if (and (org-html-html5-p info)
                              (plist-get info :html-html5-fancy))
                         "nav"
                       "div")))
      (when toc-entries
        (unless toc-heading (setq toc-heading "Table of Contents"))
        (concat (format "<%s id=\"table-of-contents\">\n" outer-tag)
                (format "<h%d>%s</h%d>\n"
                        org-html-toplevel-hlevel
                        (org-html--translate toc-heading info)
                        org-html-toplevel-hlevel)
                "<div id=\"text-table-of-contents\">"
                (org-html--toc-text toc-entries)
                "</div>\n"
                (format "</%s>\n" outer-tag)))))
#+END_SRC

* Enabling whole file export

Export the entire file rather than just a section.
These variables and functions have been removed from the main part of org-pm, for the sake of simplicity.

** DONE org-pm-file-exports
:PROPERTIES:
:ID:       A8ABC239-E74B-4654-9850-53C8521E50BA
:END:

#+BEGIN_SRC emacs-lisp
  (defvar org-pm-file-exports nil
  "List of files copied to projects.
  For each file, store a list starting with the full path of the file, and
  followed by the list of path-project pairs specified in the file.
    (full-path-of-file (path . project1) (path . project2) ...)
  Function org-pm-get-file-project-paths updates this list
  whenever it scans a buffer.
  The value is saved on disc in file specified by org-pm-project-data-file-path")
#+END_SRC

** DONE org-pm-add-project-file
CLOSED: [2013-12-19 Thu 09:14]
:PROPERTIES:
:DATE:     <2013-12-18 Wed 21:17>
:ID:       1FE8167C-A514-4C21-9FC2-4A466A692E56
:END:

When a file or a section of a file should be copied to a project base directory, add the project name to the list of projects of this file.  The list of projects of files is stored in org-pm-files.

#+BEGIN_SRC emacs-lisp
  (defun org-pm-add-project-file (project-name file)
    "In list org-pm-files, add the project-name to the list
  of projects that file bel ongs. "
    (setq org-pm-files
          (assoc-add org-pm-files file project-name)))
#+END_SRC

** TODO org-pm-remove-project-file
:PROPERTIES:
:DATE:     <2013-12-18 Wed 21:17>
:ID:       1FE8167C-A514-4C21-9FC2-4A466A692E56
:END:

When a file or a section of a file should be removed from a project, remove the project name from the list of projects of this file in org-pm-files.  (The list of projects of files is stored in org-pm-files.)

NOTE: Removing components from projects is more complex than adding, because we should also remove the files of the components from the base directory of the project.  Therefore: org-pm-parse-buffer must remove any files of components that no longer exist.  How to do this?

#+BEGIN_SRC emacs-lisp
  (defun org-pm-remove-project-file (project-name file)
    "In list org-pm-files, add the project-name to the list
  of projects that file belongs. "
    (setq org-pm-files
          (assoc-add org-pm-files file project-name)))
#+END_SRC

** UNDERWAY org-pm-add-file-to-project:
:PROPERTIES:
:ID:       24187886-5ADA-4263-806B-8655A9813C8B
:END:

Add file to current buffer to project interactively selected or input by user.

If project name input by user does not correspond to an existing project, offer to create that project.

#+BEGIN_SRC emacs-lisp
  (defun org-pm-add-file-to-project ()
    "Add the file of the current buffer to a project selected or input by the user.
      If the project selected/input by the user is not already in the file's project list:
      - If no project of that name exists, request that the project be defined using
      org-pm or other methods.
      - If no project at all exists, then offer to create default project.
      - Add the selected project to the file's list in org-pm-files.
      - Save org-pm-files.
      - Add the project name to property PROJECT in file's header."
    (interactive)
    (unless (buffer-file-name (current-buffer))
      (error "This buffer is not associated with a file.  Please save first."))
    (let* ((org-completion-use-ido t)
           (projects
            (if org-publish-project-alist
                (mapcar org-publish-project-alist 'car)
              (list org-pm-default-project-name)))
           (project-name
            (org-icompleting-read "Choose or input a project name: " projects)))
      (if (member project-name (org-pm-get-file-projects))
          (error "This file is already part of project '%s'" project-name))
      (setq project (org-pm-query-make-default-project project-name))
      (org-pm-add-project-to-file-header project-name)
      (org-pm-add-project-file project-name (buffer-file-name (current-buffer)))
      (org-pm-save-all-project-data)
      (org-pm-make-project-template project)
      (message
       "Added project named: %s to file: %s\nBase directory is: %s\nPublishing directory is: %s"
       project-name
       (file-name-nondirectory (buffer-file-name (current-buffer)))
       (plist-get (cdr project) :base-directory)
       (plist-get (cdr project) :publishing-directory))))
  #+END_SRC

** TODO org-pm-remove-file-from-project:

Remove file from project interactively selected by user.

** DONE org-pm-add-project-to-file-header
:PROPERTIES:
:DATE:     <2013-12-18 Wed 21:17>
:ID:       3E557B48-9700-4BEE-9D72-D4AC276DCF9C
:END:

** org-pm-get-file-project-paths

Get all values of file property "PROJECT".  Parse each value, and return a list of paths.
Returns list of the form:

: ((path . projectname) (path . projectname) ... )

Where =path= is the place to copy the file to and =projectname= is the name of the project followed by "undefined project" if the targed project is not defined.


#+BEGIN_SRC emacs-lisp
  (defun org-pm-add-project-to-file-header (project-name)
    "Add property PROJECT with value project-name at beginning of file."
    (save-excursion
      (save-restriction
        (widen)
        (beginning-of-buffer)
        (insert (format "#+PROJECT: %s\n" project-name)))))
#+END_SRC

** org-pm-get-file-project-paths

#+BEGIN_SRC emacs-lisp
  (defun org-pm-get-file-project-paths ()
    "Build list of projects-folders-files to export this buffer to.
  The list is created from the list of values of property PROJECT
  that are defined in this buffer.
  The list is passed to org-pm-copy-file-project-paths for copying. "
    (interactive)
    (let* ((fullpath (buffer-file-name (current-buffer)))
           (filename (file-name-nondirectory fullpath))
           (date (org-get-header-property "DATE" nil))
           (components
            (-map (lambda (component)
                    (org-pm-make-target-path
                     (org-pm-parse-prop-or-tag component filename date)))
                  (org-get-header-property "PROJECT" t))))
      ;;  (message "file components for %s are:\n%s" filename components)
      ;; FIXME: TODO: save paths to disc in org-pm save file
      components))

#+END_SRC


** org-pm-export-file-to-projects

#+BEGIN_SRC emacs-lisp
  (defun org-pm-export-file-to-projects (&optional paths)
    "Copy entire file to any projects specified by property PROJECT
  Copies the file to targets given in paths.  If paths is nil,
  then get the paths by scanning the current buffer.
  Components is provided by org-pm-get-file-project-paths."
    (interactive)
    (unless paths (setq paths (org-pm-get-file-project-paths)))
    (when paths
      (let ((origin-buffer (current-buffer))
             (target-buffer (get-buffer-create "*org-pm-copy-buf*")))
        (set-buffer target-buffer)
        (insert-buffer origin-buffer)
        (dolist (path paths) (org-pm-export-buffer-to-file path))
        (kill-buffer target-buffer)))
    ;; (message "%s exported to paths:\n %s" (buffer-file-name) paths)
    paths)
#+END_SRC

* Various drafts

** org-pm-make-filename-simple

#+BEGIN_SRC emacs-lisp

  (defun org-pm-make-filename-simple (title &optional date)
    "Simple version - to be deleted. See org-pm-make-filenme
  Convert title of entry into filename.
  remove non alphanumeric characters.
  replace spaces by dashes (-).
  lowercase everything.
  if date is provided, convert date into jekyll- (hexo-, etc.) compatible
  blog entry format, and prepend it.
  entry title 'thoughts on [pre-]processing',
  with date <2014-01-05 sun 10:56>
  becomes: '2014-01-05-thoughts-on-pre-processing' "
    (let ((filename
           (downcase
            (replace-regexp-in-string
             "-+" "-"
             (replace-regexp-in-string "[^[:alnum:]]" "-" title)))))
      filename))

#+END_SRC

** org-pm-show-target-file-list-old

#+BEGIN_SRC emacs-lisp
(defun org-pm-show-target-file-list-old (&optional file-components section-components)
  "Create a list of paths of all files which the current file and its sections
outputs to.  Present this as a grizzl list for auto-complete search.
Open selected file."
  (interactive)
  (unless file-components
    (setq file-components (org-pm-get-file-project-targets)))
  (unless section-components
    (setq section-components (org-pm-get-section-project-targets)))
  (let* ((target-list
         (mapcar (lambda (t) (cdr t))
                 (append file-components section-components)))
         (index (grizzl-make-index target-list))
         answer)
    ;; (message "%s" target-list)
    (setq answer (grizzl-completing-read "Choose file to open: " index))
    (if (string-match "(undefined project)$" answer)
        (message "No file: %s" answer)
       (find-file answer))))
#+END_SRC
* Setup auto-parse and auto-copy

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-save-hook 'org-pm-maybe-parse-and-copy)

  (defun org-pm-maybe-parse-and-copy ()
    "This function is run whenever a file is saved.
  If org-pm-auto-parse is true, make projects whose definitions are in this buffer.
  If org-pm-auto-copy is set to 'on-save, then copy the file and sections
  specified to their project base directory folders."
    (when (equal major-mode 'org-mode)
      (if org-pm-auto-parse
          ;; if org-pm-auto-copy is not nil, then don't save here:
          (org-pm-make-projects org-pm-auto-copy))
      (if (equal org-pm-auto-copy 'on-save)
          ;; Always save if running this.
          (org-pm-export-components-to-projects))))
#+END_SRC

* Main functions and commands
:PROPERTIES:
:DATE:     <2013-12-18 Wed 11:16>
:END:

** Auto-saving and parsing of documents on save

#+BEGIN_SRC emacs-lisp
  (defun org-pm-toggle-auto ()
    (interactive)
    (setq org-pm-auto-parse (not org-pm-auto-parse))
    (if org-pm-auto-parse ;; stay in sync with auto parse!
        (setq org-pm-auto-copy 'on-save)
      (setq org-pm-auto-copy nil))
    (if org-pm-auto-parse
        (message "Org-pm auto-save and copy activated.")
      (message "Org-pm auto-save and copy deactivated.")))

  (defun org-pm-save-and-update ()
    (interactive)
    (org-edit-src-save)
    (org-pm-make-projects)
    (org-pm-copy-components-to-projects))

  (defun org-pm-toggle-verbose ()
    (interactive)
    (setq org-pm-report-after-copying-p (not org-pm-report-after-copying-p))
    (if org-pm-report-after-copying-p
        (message "Reporting after copying activated")
      (message "Reporting after copying deactivated")))
#+END_SRC
*** org-pm-do-auto / org-pm-dont-auto

Utility functions

#+BEGIN_SRC emacs-lisp
  (defun org-pm-do-auto ()
    (interactive)
    (setq org-pm-auto-parse t)
    (setq org-pm-auto-copy 'on-save))

  (defun org-pm-dont-auto ()
    (interactive)
    (setq org-pm-auto-parse nil)
    (setq org-pm-auto-copy nil))
#+END_SRC

** Creating and managing project definitions

* Cleaning up duplicate links and dead projects+files

1. Some sections may have duplicate IDs, created by copy-pasting sections.
2. When a project definition is copied or renamed, this may result in having duplicate definitions, i.e. multiple project definitions with the same name in different places.  Which is the one to work with.
3. When a project definition is renamed or removed, the one stored under its previous name becomes orphaned. What to do?
4. When a project component is deleted or moved to another project, or when the project or folder or name of the file where it should be copied changes, then the old file becomes orphaned.   What to do?

Dealing with the above:

1. One can use org-id-update-id-locations to both find all ids and all duplicates.
2. is possible to check as soon as it happens, because the moment a new project gets defined one can check if the already existing definition is in the same file.  Registering duplicate projects defintions in org-pm-projectd-def-duplicates.  Function org-pm-list-project-defs creates buffer listing all project defs, including duplicates, and provides links for going to any one of thse in order to edit/remove.
3. could be delegated to commands that a user can call independently of the main specification and publishing process.
4. could be handled like No. 3.
* Early/longer versons of menu and keyboard shortcuts
** Menu: select org-pm command interactively

#+BEGIN_SRC emacs-lisp
  (defun org-pm-menu ()
    "Select and run an org-pm command from a grizzl-minibuffer menu list."
    (interactive)
    (let* ((commands '(
                       org-pm-load-all-project-data
                       org-pm-list-project-defs
                       org-pm-show-target-file-list
                       org-pm-make-projects
                       org-pm-make-project-template
                       org-pm-copy-all-parts-to-projects
                       ))
           (menu (grizzl-make-index
                 (-map (lambda (c)
                         (replace-regexp-in-string
                          "-"
                          " "
                          (replace-regexp-in-string
                           "^org-pm-" "" (symbol-name c))))
                       commands)))
          selection)
      (setq selection (grizzl-completing-read  "Select command: " menu))
      (eval
       (read (concat
              "(org-pm-"
              (replace-regexp-in-string " " "-" selection)
              ")")))))
#+END_SRC
** Keyboard shortcuts

Note: I use the Hyper-m  (= Mac fn key m) as prefix, because it is not likely to be occupied by other packages.  Users can easily remap.

#+BEGIN_SRC emacs-lisp
  ;; Add org-mode hook for org-pm-key bindings.
  ;; To initialize if present file is compiled after start time, run hook qnow.
  (let ((org-pm-key-bindings
         (lambda ()
           (define-key org-mode-map (kbd "H-m H-m") 'org-pm-menu)
           (define-key org-mode-map (kbd "H-m a") 'org-pm-toggle-auto)
           (define-key org-mode-map (kbd "H-m s") 'org-pm-save-and-update)
           (define-key org-mode-map (kbd "H-m v") 'org-pm-toggle-verbose)
           (define-key org-mode-map (kbd "H-m l") 'org-pm-list-project-defs)
           (define-key org-mode-map (kbd "H-m m") 'org-pm-make-projects)
           (define-key org-mode-map (kbd "H-m c") 'org-pm-copy-components-to-projects)
           (define-key org-mode-map (kbd "H-m t") 'org-pm-make-project-template))))
    (funcall org-pm-key-bindings)
    (add-hook 'org-mode-hook
              org-pm-key-bindings))


#+END_SRC
