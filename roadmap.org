Ideas for further development

=o-blog= https://github.com/renard/o-blog is an alternative package for creating an html site from =org-mode=.  Both =o-blog= and =org-pm= export sections of an org-mode file to separate html-files.  Here are some thoughts about porting some of the functionality of o-blog to org-pm.

=o-blog= implements three extra features, besides the splitting of sections of a file into separate html files:

1. A mechanism for including templates, by using shortcut-keywords such as =#+begin_o_blog_row=. The templates are stored as separate files, and imported into the file to be rendered in the location indicated by keywords.
2. A mechanism for inserting snippets defined inside the same org-mode files as sections, and including them in the export code at indicated locations.
3. A mechanism   for executing lisp code in those templates, by enclosing the code in =<lisp>= or ={lisp}= or =[lisp]=.

Of these, the snippet mechanism is particularly handy for creating custom menus that appear in subsets of pages.  This doubles the native mechanism of Jekyll with layouts.  However this feature has the advantage that one can define the menus in the same org-mode file, instead of having to edit layout files in the Jekyll templates folder.

There are two types of templates in o-blog:

1. Separate files stored in a template directory.
2. Snippets stored in sections of an org-mode file, marked by property "SNIPPET".

* Further Features: Link Resolution, Templates, Bootstrap?

- =org-mode= style links to org-files or sections will break when exporting with =org-pm=, because sections are exported to different files.  It is possible to use custom id's to sections in order to re-map links to the correct files (see =org-id=).

- It would be handy to define templates of content inside an org-mode file, which could then be inserted at any point in the file for export, and would furthermore be able to execute lisp code for dynamic content.

- Including lisp in the source code:
  Text enclosed in markers like this ={lisp}lisp code here{lisp}= or =<lisp>lisp code here</lisp>= or =[lisp]lisp code here[/lisp]= is evaluated as lisp code, and the resulting string is included in the rendered html file.

- Bootstrap-style row-column regions?

* Templates
:PROPERTIES:
:DATE:     <2014-02-18 Tue 08:08>
:END:

Use includes and export filters to implement lisp-interpreted templates?

** org-mode includes
http://orgmode.org/manual/Include-files.html

** o-blog <lisp> mechanism
See function =ob-eval-lisp= in file =o-blog.el= of =o-blog=.

** ways to include templates

1. Standard org-mode include
2. o-blog include?

** About o-blog templates

See files sample.org and oblog-min.org

It is not clear how everything hangs together - despite the documentation and examples.

Some notes:

In file oblog-min.org:

A templates is written as a number subsections inside a section with the property :tangle: set to the path of an html file.

The the contents of the subsections of the template definition are all html source code, enclosed in begin_src html
