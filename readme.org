#+TITLE: Org-publish-meta (org-pm)
#+AUTHOR: Ioannis Zannos (zannos [at] gmail [dot] com)

By: Ioannis Zannos (zannos [at] gmail [dot] com)

Date: December 2013

*Simplify and extend org-publish in Emacs Org-mode.*

The project is still in alpha.

* What it is

Org-pm (short for org-publish-meta) is an emacs-lisp package that simplifies and extends the task of defining org-mode publication projects, and permits the copying sections of files to multiple projects.

Org-mode is an Emacs library "for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system" (http://orgmode.org/).

- For Org-mode see: http://orgmode.org/
- For Org-mode project publishing mechanism see: http://orgmode.org/manual/Publishing.html#Publishing

* What it does

Org-pm simplifies the definition of org-mode publishing projects, by coding project publishing options as org-mode sections instead of as emacs-lisp code.  It thus eliminates the need to write emacs-lisp code as far as possible.  Furthermore, project definitions as well as css and scripts can be included in the same org-mode files that hold the text contents to be published.  Org-pm makes it possible to publish a any node (section) of a file to any number of different projects.  It also saves the contents of =org-publish-projects-alist= as well as the list of copied sections of files between sessions.

* How it works

Org-pm does not require for a file to be placed inside the folder of an Org-mode (publishing) project.  Instead, one specifies in a section (node) of a file, the projects to which it belongs through properties or tags.

Before publishing a project, all files or parts of files that are registered to this project are copied to the base directory of that project.  One may specify for a file or section to be copied to a subfolder of the project.

Project definitions (property-lists) are written as nodes (sections) in any org-mode file, using headings as property names and contents as values of the properties.  Special org-mode properties and tags are used to indicate those sections which contain project definitions and also those files and nodes which belong to projects.

Org-pm scans an org-mode file and adds to =org-publish-project-alist= any projects that this file may contain.  It also creates a list of the projects to which the file or any of its sections should be copied into variable =org-pm-files=.  Org-pm automatically saves =org-publish-project-alist= and =org-pm-files= to a file for use in further Emacs-sessions.

A (grizz-style, minibuffer-) menu plus default keyboard shortcuts give access to the commands needed to copy sections to files and publish the relevant projects.

* Features

- Use keyboard shortcuts to add or remove a file or section to/from any project.
- Generate default project automatically and provide project configuration template for further editing.
- Generate project definitions from org-mode style contents of sections.
- KISS (Keep-It-Simple-Short), very simple way to define projects and to indicate target projects using section headings, tags and properties.
- Include CSS, JavaScript and other script files in the org-mode file as sections. Contents of sections are copied as-they-are.  No need to use extra markup or escape characters.
- Copy any file or section of file to any one or more projects.
- Always automatically save configurations for use in further sessions (no need to manually edit project definitions in emacs-lisp).
- Create org-mode buffer containing list of projects, with links for opening the files that contain those definitions.
- Create YAML front matter for Jekyll, Octopress or similar markdown-based publishing schemes, based on properties of a section.

* Getting started

Run the following to install org-pm:

#+BEGIN_SRC elisp
;; load org-pm package:
(require 'org-pm)
#+END_SRC

See [[file:TUTORIAL.org][TUTORIAL]] and [[file:REFERENCE.org][REFERENCE]] for further help.
